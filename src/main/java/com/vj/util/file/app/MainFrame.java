/**
 * Copyright (c) 2012, VJ Inc. All rights reserved.
 */
package com.vj.util.file.app;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vj.util.file.DiskFile;
import com.vj.util.file.DuplicateFinder;

/**
 * 
 * @author Vijay Singh
 */
public class MainFrame extends javax.swing.JFrame implements
        TableModelListener, PropertyChangeListener {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private static final Logger LOGGER = LoggerFactory
            .getLogger(MainFrame.class);
    private final DiskDataModel diskDataModel;
    private final Timer messageTimer;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        diskDataModel = new DiskDataModel();
        diskDataModel.addTableModelListener(this);
        initComponents();
        resultTable.setCellSelectionEnabled(true);
        resultTable.setColumnSelectionAllowed(false);
        resultTable.setRowSelectionAllowed(true);
        resultTable
                .setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        resultTable.getSelectionModel().addListSelectionListener(diskDataModel);
        resultTable.setAutoCreateRowSorter(true);
        messageTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent e) {
                statusBar.setText("");
            }
        });
        messageTimer.setRepeats(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePanel = new javax.swing.JPanel();
        chhoseFolderLabel = new javax.swing.JLabel();
        folderNameField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        findDuplicateButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        statusBar = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        resultTable = new DiskPathTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("E-mail Contacts");

        filePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chhoseFolderLabel.setText("Choose Folder:");

        folderNameField.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                findDuplicateButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.setActionCommand("browseFile");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        findDuplicateButton.setText("Find Duplicates");
        findDuplicateButton
                .addActionListener(new java.awt.event.ActionListener() {
                    @Override
                    public void actionPerformed(
                            final java.awt.event.ActionEvent evt) {
                        findDuplicateButtonActionPerformed(evt);
                    }
                });

        deleteAllButton.setText("Delete All");
        deleteAllButton.setEnabled(false);
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        filterButton.setText("Apply Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(final java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        final org.jdesktop.layout.GroupLayout filePanelLayout = new org.jdesktop.layout.GroupLayout(
                filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout
                .setHorizontalGroup(filePanelLayout
                        .createParallelGroup(
                                org.jdesktop.layout.GroupLayout.LEADING)
                        .add(filePanelLayout
                                .createSequentialGroup()
                                .addContainerGap()
                                .add(filePanelLayout
                                        .createParallelGroup(
                                                org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(filePanelLayout
                                                .createSequentialGroup()
                                                .add(chhoseFolderLabel)
                                                .addPreferredGap(
                                                        org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(folderNameField,
                                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                        303, Short.MAX_VALUE))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING,
                                                filePanelLayout
                                                        .createSequentialGroup()
                                                        .add(filterButton)
                                                        .addPreferredGap(
                                                                org.jdesktop.layout.LayoutStyle.RELATED,
                                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                                Short.MAX_VALUE)
                                                        .add(findDuplicateButton,
                                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                                                174,
                                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(
                                        org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(filePanelLayout
                                        .createParallelGroup(
                                                org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(browseButton)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING,
                                                deleteAllButton))
                                .addContainerGap()));
        filePanelLayout
                .setVerticalGroup(filePanelLayout
                        .createParallelGroup(
                                org.jdesktop.layout.GroupLayout.LEADING)
                        .add(filePanelLayout
                                .createSequentialGroup()
                                .addContainerGap()
                                .add(filePanelLayout
                                        .createParallelGroup(
                                                org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(folderNameField,
                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(browseButton)
                                        .add(chhoseFolderLabel))
                                .addPreferredGap(
                                        org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(filePanelLayout
                                        .createParallelGroup(
                                                org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(findDuplicateButton)
                                        .add(deleteAllButton).add(filterButton))
                                .addContainerGap(
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)));

        resultTable.setModel(diskDataModel);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(final java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(resultTable);

        final org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
                getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout
                .createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING,
                        layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout
                                        .createParallelGroup(
                                                org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING,
                                                scrollPane,
                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                487, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING,
                                                filePanel,
                                                0,
                                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .add(layout
                                                .createSequentialGroup()
                                                .add(statusBar,
                                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                                        242, Short.MAX_VALUE)
                                                .add(18, 18, 18)
                                                .add(progressBar,
                                                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                                        227,
                                                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap()));
        layout.setVerticalGroup(layout
                .createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout
                        .createSequentialGroup()
                        .addContainerGap()
                        .add(filePanel,
                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(
                                org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(scrollPane,
                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                205, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(layout
                                .createParallelGroup(
                                        org.jdesktop.layout.GroupLayout.TRAILING,
                                        false)
                                .add(statusBar,
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)
                                .add(progressBar,
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)).addContainerGap()));

        filePanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_browseButtonActionPerformed
        // Handle open button action.
        if (evt.getSource() == browseButton) {
            final JFileChooser fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            final int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                final File file = fc.getSelectedFile();
                folderNameField.setText(file.getAbsolutePath());
            }
        }
    }// GEN-LAST:event_browseButtonActionPerformed

    private void findDuplicateButtonActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_findDuplicateButtonActionPerformed
        diskDataModel.clear();
        final String path = folderNameField.getText();
        final DiskFile file = new DiskFile(path, -1L);
        if (file.isDirectory()) {
            final DuplicateFinder duplicate = new DuplicateFinder(path,
                    diskDataModel);
            duplicate.addPropertyChangeListener(this);
            duplicate.execute();
        } else {
            statusBar.setText('"' + path + "\" is not a valid directory.");
        }
    }// GEN-LAST:event_findDuplicateButtonActionPerformed

    private void deleteAllButtonActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteAllButtonActionPerformed
        diskDataModel.deleteAllDuplicates();
    }// GEN-LAST:event_deleteAllButtonActionPerformed

    private void filterButtonActionPerformed(
            final java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_filterButtonActionPerformed

    private void resultTableMouseClicked(final java.awt.event.MouseEvent evt) {// GEN-FIRST:event_resultTableMouseClicked
        if (evt.getClickCount() == 2) {
            diskDataModel.open(resultTable.getSelectedRow(),
                    resultTable.getSelectedColumn());
        }
    }// GEN-LAST:event_resultTableMouseClicked

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            final javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels = javax.swing.UIManager
                    .getInstalledLookAndFeels();
            for (final LookAndFeelInfo installedLookAndFeel : installedLookAndFeels) {
                if ("Nimbus".equals(installedLookAndFeel.getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeel
                            .getClassName());
                    System.out.println(installedLookAndFeel.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException
                | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            LOGGER.error("Failed to initialize Nimbus look and feel.", ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel chhoseFolderLabel;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton filterButton;
    private javax.swing.JButton findDuplicateButton;
    private javax.swing.JTextField folderNameField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable resultTable;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel statusBar;

    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(final TableModelEvent e) {
        resultTable.revalidate();
        resultTable.repaint();
    }

    @Override
    public void propertyChange(final PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName()) {
            final int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
            if (progress == 100) {
                deleteAllButton.setEnabled(true);
            }
        } else if ("statusbar" == evt.getPropertyName()) {
            statusBar.setText(evt.getNewValue().toString());
        }
    }
}
